{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "66bfd544",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-11-07T12:47:28.594051Z",
     "iopub.status.busy": "2024-11-07T12:47:28.593454Z",
     "iopub.status.idle": "2024-11-07T12:47:29.944348Z",
     "shell.execute_reply": "2024-11-07T12:47:29.942896Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 1.358423,
     "end_time": "2024-11-07T12:47:29.947150",
     "exception": false,
     "start_time": "2024-11-07T12:47:28.588727",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/horse1/horse1.jpg\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b1e3db27",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-07T12:47:29.954684Z",
     "iopub.status.busy": "2024-11-07T12:47:29.954133Z",
     "iopub.status.idle": "2024-11-07T12:47:52.027428Z",
     "shell.execute_reply": "2024-11-07T12:47:52.026009Z"
    },
    "papermill": {
     "duration": 22.080375,
     "end_time": "2024-11-07T12:47:52.030568",
     "exception": false,
     "start_time": "2024-11-07T12:47:29.950193",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/mobilenet_v2/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_1.0_224.h5\n",
      "\u001b[1m14536120/14536120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2s/step\n",
      "Downloading data from https://storage.googleapis.com/download.tensorflow.org/data/imagenet_class_index.json\n",
      "\u001b[1m35363/35363\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n",
      "Predicted animal: sorrel with probability: 86.72%\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.preprocessing import image\n",
    "import numpy as np\n",
    "import requests\n",
    "from io import BytesIO\n",
    "from PIL import Image\n",
    "# Load pre-trained MobileNetV2 model\n",
    "model = tf.keras.applications.MobileNetV2(weights='imagenet')\n",
    "# Function to process the image\n",
    "def prepare_image(img_path):\n",
    "    # Load image\n",
    "    img = Image.open(img_path).resize((224, 224))  # Resize to the input size of the model\n",
    "    img_array = np.array(img)\n",
    "    \n",
    "    # Preprocess the image for MobileNetV2\n",
    "    img_array = tf.keras.applications.mobilenet_v2.preprocess_input(img_array)\n",
    "    \n",
    "    # Add batch dimension\n",
    "    img_array = np.expand_dims(img_array, axis=0)\n",
    "    \n",
    "    return img_array\n",
    "# Function to predict the label\n",
    "def predict_animal(img_path):\n",
    "    img_array = prepare_image(img_path)\n",
    "    \n",
    "    # Predict the image class\n",
    "    predictions = model.predict(img_array)\n",
    "    \n",
    "    # Decode predictions\n",
    "    decoded_predictions = tf.keras.applications.mobilenet_v2.decode_predictions(predictions, top=1)[0][0]\n",
    "    \n",
    "    # Display the result\n",
    "    print(f\"Predicted animal: {decoded_predictions[1]} with probability: {decoded_predictions[2]*100:.2f}%\")\n",
    "# Example: Upload an image from a URL (you can replace this with a local file)\n",
    "img_url = \"/kaggle/input/horse1/horse1.jpg\"  # Replace with your image URL or path\n",
    "response = predict_animal(img_url)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 6031806,
     "sourceId": 9833919,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 29.621264,
   "end_time": "2024-11-07T12:47:54.589345",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-11-07T12:47:24.968081",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
